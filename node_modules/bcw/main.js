import inquirer from "inquirer";
import fs from "fs";
import bcrypt from "bcryptjs";
import { execSync } from "child_process";

const templates = [
  "mvc-client",
  "mvc-client-observer",
  "node-server",
  "node-server-auth0",
  "other"
];
const CURR_DIR = process.cwd();

//prompts and the name of properties added to the answers object
const prompts = [
  {
    name: "project-choice",
    type: "list",
    message: "What project template would you like to generate?",
    choices: templates
  },
  {
    name: "project-name",
    type: "input",
    message: "Project name:",
    validate: function(input) {
      if (/^([A-Za-z\-\_\d])+$/.test(input)) return true;
      else
        return "Project name may only include letters, numbers, underscores and hashes.";
    }
  }
];
const otherPrompt = [
  {
    name: "templateName",
    type: "input",
    message: "Template:"
  }
];
const passwordPrompt = [
  {
    name: "password",
    type: "input",
    message: "Password:"
  }
];

const otherPasswords = {
  hackathon: "$2a$10$DB1SB58cJeqvz8HpZXbbsOv6dkMjxwhlw1FKhLTa98lEmCKx.7lly"
};

inquirer.prompt(prompts).then(async answers => {
  let projectChoice = answers["project-choice"];
  let projectName = answers["project-name"];
  // @ts-ignore
  let hasAuth = projectChoice.toLowerCase().includes("auth");
  // @ts-ignore
  let isServer = projectChoice.toLowerCase().includes("server");
  // @ts-ignore
  projectName = projectName.toLowerCase();
  try {
    projectChoice = await handleProjectChoice(projectChoice);
  } catch (e) {
    console.error(e.message);
    return;
  }

  let projPath = `${CURR_DIR}/${projectName}`;
  try {
    execSync(
      `node ${__dirname}/node_modules/create-project ${projectName} codeworks-templates/${projectChoice}`
    );
  } catch (e) {
    console.error("[ERROR] Invalid Template");
    return;
  }

  fs.writeFileSync(`${projPath}/.gitignore`, "node_modules \n.env", "utf8");
  let envContents = ["CONNECTION_STRING=", "PORT="];
  if (hasAuth) {
    envContents.push("AUTH_DOMAIN=", " AUTH_AUDIENCE=", "AUTH_CLIENT_ID=");
  }
  fs.writeFileSync(`${projPath}/.env`, envContents.join("\n"), "utf8");
  console.log(`cd into ${projectName}`);
  if (isServer) {
    return console.log(`run npm i to install dependencies`);
  }
});

async function handleProjectChoice(projectChoice) {
  if (projectChoice == "other") {
    let { templateName } = await inquirer.prompt(otherPrompt);
    let protectedTemplate = otherPasswords[templateName];

    if (protectedTemplate) {
      let { password } = await inquirer.prompt(passwordPrompt);
      let valid = await bcrypt.compare(password, protectedTemplate);
      if (!valid) {
        throw new Error("[UNAUTHORIZED] Invalid Password");
      }
    }
    projectChoice = templateName;
  }
  return projectChoice;
}
